<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git | Hugo Academic CV Theme</title>
    <link>http://localhost:1313/tags/git/</link>
      <atom:link href="http://localhost:1313/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <description>Git</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Wed, 25 Oct 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu_645fa481986063ef.png</url>
      <title>Git</title>
      <link>http://localhost:1313/tags/git/</link>
    </image>
    
    <item>
      <title>Управление версиями. Git</title>
      <link>http://localhost:1313/post/git/</link>
      <pubDate>Wed, 25 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/git/</guid>
      <description>&lt;h1 id=&#34;системы-контроля-версий-общие-понятия&#34;&gt;Системы контроля версий. Общие понятия&lt;/h1&gt;
&lt;p&gt;Системы контроля версий (Version Control System, VCS) применяются при работе нескольких человек над одним проектом. Обычно основное дерево проекта хранится в локальном или удалённом репозитории, к которому настроен доступ для участников проекта. При внесении изменений в содержание проекта система контроля версий позволяет их фиксировать, совмещать изменения, произведённые разными участниками проекта, производить откат к любой более ранней версии проекта, если это требуется.&lt;/p&gt;
&lt;p&gt;В классических системах контроля версий используется централизованная модель, предполагающая наличие единого репозитория для хранения файлов. Выполнение большинства функций по управлению версиями осуществляется специальным сервером. Участник проекта (пользователь) перед началом работы посредством определённых команд получает нужную ему версию файлов. После внесения изменений, пользователь размещает новую версию в хранилище. При этом предыдущие версии не удаляются из центрального хранилища и к ним можно вернуться в любой момент. Сервер может сохранять не полную версию изменённых файлов, а производить так называемую дельта-компрессию — сохранять только изменения между последовательными версиями, что позволяет уменьшить объём хранимых данных.&lt;/p&gt;
&lt;p&gt;Системы контроля версий поддерживают возможность отслеживания и разрешения конфликтов, которые могут возникнуть при работе нескольких человек над одним файлом. Можно объединить (слить) изменения, сделанные разными участниками (автоматически или вручную), вручную выбрать нужную версию, отменить изменения вовсе или заблокировать файлы для изменения. В зависимости от настроек блокировка не позволяет другим пользователям получить рабочую копию или препятствует изменению рабочей копии файла средствами файловой системы ОС, обеспечивая таким образом, привилегированный доступ только одному пользователю, работающему с файлом.&lt;/p&gt;
&lt;p&gt;Системы контроля версий также могут обеспечивать дополнительные, более гибкие функциональные возможности. Например, они могут поддерживать работу с несколькими версиями одного файла, сохраняя общую историю изменений до точки ветвления версий и собственные истории изменений каждой ветви. Кроме того, обычно доступна информация о том, кто из участников, когда и какие изменения вносил. Обычно такого рода информация хранится в журнале изменений, доступ к которому можно ограничить.&lt;/p&gt;
&lt;p&gt;В отличие от классических, в распределённых системах контроля версий центральный репозиторий не является обязательным.&lt;/p&gt;
&lt;p&gt;Среди классических VCS наиболее известны CVS, Subversion, а среди распределённых — Git, Bazaar, Mercurial. Принципы их работы схожи, отличаются они в основном синтаксисом используемых в работе команд.&lt;/p&gt;
&lt;p&gt;Примеры использования git
Система контроля версий Git представляет собой набор программ командной строки. Доступ к ним можно получить из терминала посредством ввода команды git с различными опциями.
Благодаря тому, что Git является распределённой системой контроля версий, резервную копию локального хранилища можно сделать простым копированием или архивацией.&lt;/p&gt;
&lt;p&gt;Основные команды git
Перечислим наиболее часто используемые команды git.&lt;/p&gt;
&lt;p&gt;Создание основного дерева репозитория:&lt;/p&gt;
&lt;p&gt;git init
Получение обновлений (изменений) текущего дерева из центрального репозитория:&lt;/p&gt;
&lt;p&gt;git pull
Отправка всех произведённых изменений локального дерева в центральный репозиторий:&lt;/p&gt;
&lt;p&gt;git push
Просмотр списка изменённых файлов в текущей директории:&lt;/p&gt;
&lt;p&gt;git status
Просмотр текущих изменений:&lt;/p&gt;
&lt;p&gt;git diff
Сохранение текущих изменений:&lt;/p&gt;
&lt;p&gt;добавить все изменённые и/или созданные файлы и/или каталоги:&lt;/p&gt;
&lt;p&gt;git add .
добавить конкретные изменённые и/или созданные файлы и/или каталоги:&lt;/p&gt;
&lt;p&gt;git add имена_файлов
удалить файл и/или каталог из индекса репозитория (при этом файл и/или каталог остаётся в локальной директории):&lt;/p&gt;
&lt;p&gt;git rm имена_файлов
Сохранение добавленных изменений:&lt;/p&gt;
&lt;p&gt;сохранить все добавленные изменения и все изменённые файлы:&lt;/p&gt;
&lt;p&gt;git commit -am &amp;lsquo;Описание коммита&amp;rsquo;
сохранить добавленные изменения с внесением комментария через встроенный редактор:&lt;/p&gt;
&lt;p&gt;git commit
создание новой ветки, базирующейся на текущей:&lt;/p&gt;
&lt;p&gt;git checkout -b имя_ветки
переключение на некоторую ветку:&lt;/p&gt;
&lt;p&gt;git checkout имя_ветки
(при переключении на ветку, которой ещё нет в локальном репозитории, она будет создана и связана с удалённой)
отправка изменений конкретной ветки в центральный репозиторий:&lt;/p&gt;
&lt;p&gt;git push origin имя_ветки
слияние ветки с текущим деревом:&lt;/p&gt;
&lt;p&gt;git merge &amp;ndash;no-ff имя_ветки
Удаление ветки:&lt;/p&gt;
&lt;p&gt;удаление локальной уже слитой с основным деревом ветки:&lt;/p&gt;
&lt;p&gt;git branch -d имя_ветки
принудительное удаление локальной ветки:&lt;/p&gt;
&lt;p&gt;git branch -D имя_ветки
удаление ветки с центрального репозитория:&lt;/p&gt;
&lt;p&gt;git push origin :имя_ветки&lt;/p&gt;
&lt;p&gt;Стандартные процедуры работы при наличии центрального репозитория
Работа пользователя со своей веткой начинается с проверки и получения изменений из центрального репозитория (при этом в локальное дерево до начала этой процедуры не должно было вноситься изменений):&lt;/p&gt;
&lt;p&gt;git checkout master
git pull
git checkout -b имя_ветки
Затем можно вносить изменения в локальном дереве и/или ветке.&lt;/p&gt;
&lt;p&gt;После завершения внесения какого-то изменения в файлы и/или каталоги проекта необходимо разместить их в центральном репозитории. Для этого необходимо проверить, какие файлы изменились к текущему моменту:&lt;/p&gt;
&lt;p&gt;git status
При необходимости удаляем лишние файлы, которые не хотим отправлять в центральный репозиторий.&lt;/p&gt;
&lt;p&gt;Затем полезно просмотреть текст изменений на предмет соответствия правилам ведения чистых коммитов:&lt;/p&gt;
&lt;p&gt;git diff
Если какие-либо файлы не должны попасть в коммит, то помечаем только те файлы, изменения которых нужно сохранить. Для этого используем команды добавления и/или удаления с нужными опциями:&lt;/p&gt;
&lt;p&gt;git add …
git rm …
Если нужно сохранить все изменения в текущем каталоге, то используем:&lt;/p&gt;
&lt;p&gt;git add .
Затем сохраняем изменения, поясняя, что было сделано:&lt;/p&gt;
&lt;p&gt;git commit -am &amp;ldquo;Some commit message&amp;rdquo;
Отправляем изменения в центральный репозиторий:&lt;/p&gt;
&lt;p&gt;git push origin имя_ветки
или&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;p&gt;Работа с локальным репозиторием
Создадим локальный репозиторий.
Сначала сделаем предварительную конфигурацию, указав имя и email владельца репозитория:&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global user.name &amp;ldquo;Имя Фамилия&amp;rdquo;
git config &amp;ndash;global  user.email &amp;ldquo;work@mail&amp;rdquo;
Настроим utf-8 в выводе сообщений git:&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global quotepath false
Для инициализации локального репозитория, расположенного, например, в каталоге ~/tutorial, необходимо ввести в командной строке:&lt;/p&gt;
&lt;p&gt;cd
mkdir tutorial
cd tutorial
git init
После это в каталоге tutorial появится каталог .git, в котором будет храниться история изменений.
Создадим тестовый текстовый файл hello.txt и добавим его в локальный репозиторий:&lt;/p&gt;
&lt;p&gt;echo &amp;lsquo;hello world&amp;rsquo; &amp;gt; hello.txt
git add hello.txt
git commit -am &amp;lsquo;Новый файл&amp;rsquo;
Воспользуемся командой status для просмотра изменений в рабочем каталоге, сделанных с момента последней ревизии:&lt;/p&gt;
&lt;p&gt;git status
Во время работы над проектом так или иначе могут создаваться файлы, которые не требуется добавлять в последствии в репозиторий. Например, временные файлы, создаваемые редакторами, или объектные файлы, создаваемые компиляторами. Можно прописать шаблоны игнорируемых при добавлении в репозиторий типов файлов в файл .gitignore с помощью сервисов. Для этого сначала нужно получить список имеющихся шаблонов:&lt;/p&gt;
&lt;p&gt;curl -L -s &lt;a href=&#34;https://www.gitignore.io/api/list&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gitignore.io/api/list&lt;/a&gt;
Затем скачать шаблон, например, для C и C++&lt;/p&gt;
&lt;p&gt;curl -L -s &lt;a href=&#34;https://www.gitignore.io/api/c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gitignore.io/api/c&lt;/a&gt; &amp;raquo; .gitignore
curl -L -s &lt;a href=&#34;https://www.gitignore.io/api/c&amp;#43;&amp;#43;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gitignore.io/api/c++&lt;/a&gt; &amp;raquo; .gitignore&lt;/p&gt;
&lt;p&gt;Работа с сервером репозиториев
Для последующей идентификации пользователя на сервере репозиториев необходимо сгенерировать пару ключей (приватный и открытый):&lt;/p&gt;
&lt;p&gt;ssh-keygen -C &amp;ldquo;Имя Фамилия &lt;a href=&#34;mailto:work@mail&#34;&gt;work@mail&lt;/a&gt;&amp;rdquo;
Ключи сохраняться в каталоге ~/.ssh/.
Существует несколько доступных серверов репозиториев с возможностью бесплатного размещения данных. Например, &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/&lt;/a&gt;.
Для работы с ним необходимо сначала завести на сайте &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/&lt;/a&gt; учётную запись. Затем необходимо загрузить сгенерённый нами ранее открытый ключ.
Для этого зайти на сайт &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/&lt;/a&gt; под своей учётной записью и перейти в меню GitHub setting.
После этого выбрать в боковом меню GitHub setting&amp;gt;SSH-ключи и нажать кнопку Добавить ключ. Скопировав из локальной консоли ключ в буфер обмена:&lt;/p&gt;
&lt;p&gt;cat ~/.ssh/id_rsa.pub | xclip -sel clip
Вставляем ключ в появившееся на сайте поле.&lt;/p&gt;
&lt;p&gt;После этого можно создать на сайте репозиторий, выбрав в меню , дать ему название и сделать общедоступным (публичным).&lt;/p&gt;
&lt;p&gt;Для загрузки репозитория из локального каталога на сервер выполняем следующие команды:&lt;/p&gt;
&lt;p&gt;git remote add origin
ssh://git@github.com/&lt;username&gt;/&lt;reponame&gt;.git
git push -u origin master
Далее на локальном компьютере можно выполнять стандартные процедуры для работы с git при наличии центрального репозитория.&lt;/p&gt;
&lt;p&gt;Базовая настройка git&lt;/p&gt;
&lt;p&gt;Первичная настройка параметров git
Зададим имя и email владельца репозитория:&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global user.name &amp;ldquo;Name Surname&amp;rdquo;
git config &amp;ndash;global user.email &amp;ldquo;work@mail&amp;rdquo;
Настроим utf-8 в выводе сообщений git:&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global core.quotepath false
Настройте верификацию и подписание коммитов git.
Зададим имя начальной ветки (будем называть её master):&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global init.defaultBranch master&lt;/p&gt;
&lt;p&gt;Учёт переносов строк
В разных операционных системах приняты разные символы для перевода строк:
Windows: \r\n (CR и LF);
Unix: \n (LF);
Mac: \r (CR).
Посмотреть значения переносов строк в репозитории можно командой:&lt;/p&gt;
&lt;p&gt;git ls-files &amp;ndash;eol
Параметр autocrlf&lt;/p&gt;
&lt;p&gt;Настройка core.autocrlf предназначена для того, чтобы в главном репозитории все переводы строк текстовых файлах были одинаковы.
Настройка core.autocrlf с параметрами true и input делает все переводы строк текстовых файлов в главном репозитории одинаковыми.
core.autocrlf true: конвертация CRLF-&amp;gt;LF при коммите и обратно LF-&amp;gt;CRLF при выгрузке кода из репозитория на файловую систему (обычно используется в Windows).
core.autocrlf input: конвертация CRLF-&amp;gt;LF только при коммитах (используются в MacOS/Linux).
Варианты конвертации&lt;/p&gt;
&lt;p&gt;Таблица 1.: Варианты конвертации для разных значений параметра core.autocrlf
core.autocrlf	false	input	true
git commit
git checkout
Установка параметра:&lt;/p&gt;
&lt;p&gt;Для Windows&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global core.autocrlf true
Для Linux&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global core.autocrlf input
Параметр safecrlf&lt;/p&gt;
&lt;p&gt;Настройка core.safecrlf предназначена для проверки, является ли окончаний строк обратимым для текущей настройки core.autocrlf.
core.safecrlf true: запрещается необратимое преобразование lf&amp;lt;-&amp;gt;crlf. Полезно, когда существуют бинарные файлы, похожие на текстовые файлы.
core.safecrlf warn: печать предупреждения, но коммиты с необратимым переходом принимаются.
Установка параметра:&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global core.safecrlf warn&lt;/p&gt;
&lt;p&gt;Создание ключа ssh&lt;/p&gt;
&lt;p&gt;Общая информация
Алгоритмы шифрования ssh&lt;/p&gt;
&lt;p&gt;Аутентификация&lt;/p&gt;
&lt;p&gt;В SSH поддерживается четыре алгоритма аутентификации по открытым ключам:&lt;/p&gt;
&lt;p&gt;DSA:
размер ключей DSA не может превышать 1024, его следует отключить;
RSA:
следует создавать ключ большого размера: 4096 бит;
ECDSA:
ECDSA завязан на технологиях NIST, его следует отключить;
Ed25519:
используется пока не везде.
Симметричные шифры&lt;/p&gt;
&lt;p&gt;Из 15 поддерживаемых в SSH алгоритмов симметричного шифрования, безопасными можно считать:
chacha20-poly1305;
aes*-ctr;
aes*-gcm.
Шифры 3des-cbc и arcfour потенциально уязвимы в силу использования DES и RC4.
Шифр cast128-cbc применяет слишком короткий размер блока (64 бит).
Обмен ключами&lt;/p&gt;
&lt;p&gt;Применяемые в SSH методы обмена ключей DH (Diffie-Hellman) и ECDH (Elliptic Curve Diffie-Hellman) можно считать безопасными.
Из 8 поддерживаемых в SSH протоколов обмена ключами вызывают подозрения три, основанные на рекомендациях NIST:
ecdh-sha2-nistp256;
ecdh-sha2-nistp384;
ecdh-sha2-nistp521.
Не стоит использовать протоколы, основанные на SHA1.
Файлы ssh-ключей&lt;/p&gt;
&lt;p&gt;По умолчанию пользовательские ssh-ключи сохраняются в каталоге ~/.ssh в домашнем каталоге пользователя.
Убедитесь, что у вас ещё нет ключа.
Файлы закрытых ключей имеют названия типа id_&amp;lt;алгоритм&amp;gt; (например, id_dsa, id_rsa).&lt;/p&gt;
&lt;p&gt;По умолчанию закрытые ключи имеют имена:&lt;/p&gt;
&lt;p&gt;id_dsa
id_ecdsa
id_ed25519
id_rsa
Открытые ключи имеют дополнительные расширения .pub.&lt;/p&gt;
&lt;p&gt;По умолчанию публичные ключи имеют имена:&lt;/p&gt;
&lt;p&gt;id_dsa.pub
id_ecdsa.pub
id_ed25519.pub
id_rsa.pub
При создании ключа команда попросит ввести любую ключевую фразу для более надёжной защиты вашего пароля. Можно пропустить этот этап, нажав Enter.
Сменить пароль на ключ можно с помощью команды:&lt;/p&gt;
&lt;p&gt;ssh-keygen -p&lt;/p&gt;
&lt;p&gt;Создание ключа ssh
Ключ ssh создаётся командой:&lt;/p&gt;
&lt;p&gt;ssh-keygen -t &amp;lt;алгоритм&amp;gt;
Создайте ключи:&lt;/p&gt;
&lt;p&gt;по алгоритму rsa с ключём размером 4096 бит:&lt;/p&gt;
&lt;p&gt;ssh-keygen -t rsa -b 4096
по алгоритму ed25519:&lt;/p&gt;
&lt;p&gt;ssh-keygen -t ed25519
При создании ключа команда попросит ввести любую ключевую фразу для более надёжной защиты вашего пароля. Можно пропустить этот этап, нажав Enter.
Сменить пароль на ключ можно с помощью команды:&lt;/p&gt;
&lt;p&gt;ssh-keygen -p&lt;/p&gt;
&lt;p&gt;Добавление SSH-ключа в учётную запись GitHub
Скопируйте созданный SSH-ключ в буфер обмена командой:&lt;/p&gt;
&lt;p&gt;xclip -i &amp;lt; ~/.ssh/id_ed25519.pub
Откройте настройки своего аккаунта на GitHub и перейдем в раздел SSH and GPC keys.
Нажмите кнопку ew SSH key.
Добавьте в поле Title название этого ключа, например, ed25519@hostname.
Вставьте из буфера обмена в поле Key ключ.
Нажмите кнопку Add SSH key.&lt;/p&gt;
&lt;p&gt;Верификация коммитов с помощью PGP
Как настроить PGP-подпись коммитов с помощью gpg.&lt;/p&gt;
&lt;p&gt;Общая информация
Коммиты имеют следующие свойства:
author (автор) — контрибьютор, выполнивший работу (указывается для справки);
committer (коммитер) — пользователь, который закоммитил изменения.
Эти свойства можно переопределить при совершении коммита.
Авторство коммита можно подделать.
В git есть функция подписи коммитов.
Для подписывания коммитов используется технология PGP (см. Работа с PGP).
Подпись коммита позволяет удостовериться в том, кто является коммитером. Авторство не проверяется.&lt;/p&gt;
&lt;p&gt;Создание ключа
Генерируем ключ&lt;/p&gt;
&lt;p&gt;gpg &amp;ndash;full-generate-key
Из предложенных опций выбираем:&lt;/p&gt;
&lt;p&gt;тип RSA and RSA;
размер 4096;
выберите срок действия; значение по умолчанию — 0 (срок действия не истекает никогда).
GPG запросит личную информацию, которая сохранится в ключе:
Имя (не менее 5 символов).
Адрес электронной почты.
При вводе email убедитесь, что он соответствует адресу, используемому на GitHub.
Комментарий. Можно ввести что угодно или нажать клавишу ввода, чтобы оставить это поле пустым.&lt;/p&gt;
&lt;p&gt;Экспорт ключа
Выводим список ключей и копируем отпечаток приватного ключа:&lt;/p&gt;
&lt;p&gt;gpg &amp;ndash;list-secret-keys &amp;ndash;keyid-format LONG
Отпечаток ключа — это последовательность байтов, используемая для идентификации более длинного, по сравнению с самим отпечатком ключа.
Формат строки:&lt;/p&gt;
&lt;p&gt;sec   Алгоритм/Отпечаток_ключа Дата_создания [Флаги] [Годен_до]
ID_ключа
Экспортируем ключ в формате ASCII по его отпечатку:&lt;/p&gt;
&lt;p&gt;gpg &amp;ndash;armor &amp;ndash;export &lt;PGP Fingerprint&gt;&lt;/p&gt;
&lt;p&gt;Добавление PGP ключа в GitHub
Копируем ключ и добавляем его в настройках профиля на GitHub (или GitLab).
Cкопируйте ваш сгенерированный PGP ключ в буфер обмена:&lt;/p&gt;
&lt;p&gt;gpg &amp;ndash;armor &amp;ndash;export &lt;PGP Fingerprint&gt; | xclip -sel clip
Перейдите в настройки GitHub (&lt;a href=&#34;https://github.com/settings/keys%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/settings/keys)&lt;/a&gt;, нажмите на кнопку New GPG key и вставьте полученный ключ в поле ввода.&lt;/p&gt;
&lt;p&gt;Подписывание коммитов git
Подпись коммитов при работе через терминал:&lt;/p&gt;
&lt;p&gt;git commit -a -S -m &amp;lsquo;your commit message&amp;rsquo;
Флаг -S означает создание подписанного коммита. При этом может потребоваться ввод кодовой фразы, заданной при генерации GPG-ключа.&lt;/p&gt;
&lt;p&gt;Настройка автоматических подписей коммитов git
Используя введёный email, укажите Git применять его при подписи коммитов:&lt;/p&gt;
&lt;p&gt;git config &amp;ndash;global user.signingkey &lt;PGP Fingerprint&gt;
git config &amp;ndash;global commit.gpgsign true
git config &amp;ndash;global gpg.program $(which gpg2)&lt;/p&gt;
&lt;p&gt;Проверка коммитов в Git
GitHub и GitLab будут показывать значок Verified рядом с вашими новыми коммитами.&lt;/p&gt;
&lt;p&gt;Режим бдительности (vigilant mode)
На GitHub есть настройка vigilant mode.
Все неподписанные коммиты будут явно помечены как Unverified.
Включается это в настройках в разделе SSH and GPG keys. Установите метку на Flag unsigned commits as unverified.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
